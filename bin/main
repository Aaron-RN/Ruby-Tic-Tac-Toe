#!/usr/bin/env ruby

require './lib/game_logic'
require './lib/player'

puts "\nTic Tac Toe\n\n"

def new_game
  $player_one = Player.new("X", "green")
  $player_two = Player.new("O", "red")
  $Game = BoardLogic.new(rows = 3, cols = 3)
  $Game.whos_turn?($player_one)
  $Game.player_setup($player_one, $player_two)
  display_board()
  get_player_input()
end

def display_board
  for i in 0..($Game.cols*$Game.rows)+(($Game.rows-1)*$Game.cols)-1
      if i < $Game.cols
        print " #{$Game.board[i]}" unless i == $Game.cols-1
        print " |" unless i == $Game.cols-1
        print " #{$Game.board[i]}" if i == $Game.cols-1
      elsif i < $Game.cols*2 && i > $Game.cols-1
        if i == $Game.cols
          puts "\n"
        end
        print "----"
      elsif i < $Game.cols*3 && i > ($Game.cols*2)-1
        if i == $Game.cols*2
          puts "\n"
        end
        print " #{$Game.board[i-3]} |" unless i == ($Game.cols*3)-1
        print " #{$Game.board[i-3]}" if i == ($Game.cols*3)-1
      elsif i < $Game.cols*4 && i > ($Game.cols*3)-1
        if i == $Game.cols*3
          puts "\n"
        end
        print "----"
      elsif i < $Game.cols*5 && i > ($Game.cols*4)-1
        if i == $Game.cols*4
          puts "\n"
        end
        print " #{$Game.board[i-6]} |" unless i == ($Game.cols*5)-1
        print " #{$Game.board[i-6]}" if i == ($Game.cols*5)-1
      end
    end
    puts "\n \n"
end

def pos_to_board(pos, sym, color)
  mark_position($Game, $Game.player_turn, pos)
  display_board()
  if $Game.game_over
    if $Game.winner
      puts 'GAME OVER'.bold
      puts "Player #{$Game.player_turn.symbol} Wins!\n".underline
    elsif $Game.turns_taken >= $Game.max_turns
      puts 'DRAW!'.bold.underline,"\n"
    end
  end
  $Game.player_turn == $player_one ? $Game.whos_turn?($player_two) : $Game.whos_turn?($player_one)
  get_player_input() unless $Game.game_over
end

def get_player_input
  puts 'Player ' + $Game.player_turn.symbol.to_s.red + "\'s Turn" if $Game.player_turn.color == "red"
  puts 'Player ' + $Game.player_turn.symbol.to_s.green + "\'s Turn" if $Game.player_turn.color == "green"
  puts 'Player ' + $Game.player_turn.symbol.to_s.blue + "\'s Turn" if $Game.player_turn.color == "blue"
  print "Choose an available position to play: "
  pos_chosen = gets.chomp.to_i
  puts "\n"

  if check_board_pos($Game, pos_chosen)[0]
    pos_to_board(pos_chosen, $Game.player_turn.symbol, $Game.player_turn.color)
  else
    puts check_board_pos($Game, pos_chosen)[1].bold,"\n"
    display_board()
    get_player_input()
  end
end

new_game()